(define (mur id cross)
    (push)
    (let
        (
            (g (* (c "gain-a" id) (* (c "gain-b" id) 10)))
            (clr-coeff (c "clr-coeff" id #:coeff 0.1))
            (scale-gh-y-incomplete-coeff (c "scale-gh-y-incomplete-coeff" id #:coeff 100))
            (scale-x (c "scale-x" id))
            (scale-x-gh (c "scale-x-gh" id))
            (scale-z (c "scale-z" id))
            (scale-z-gh (c "scale-z-gh" id))
            (trans-x-gh (c "trans-x-gh" id))
            (trans-x-freq (c "trans-x-gh-freq" id))
            (trans-y-gh (c "trans-y-gh" id))
            (trans-y-freq (c "trans-y-gh-freq" id))
            (scale-global (c "scale-global" id))
            (L-X (c "R-L-X" id))
            (L-Y (c "R-L-Y" id))
            (L-Z (c "R-L-Z" id))
            (Block-L-X (c "blok-R-L-X" id #:coeff 1000))
            (Block-L-Y (c "blok-R-L-Y" id #:coeff 1000))
            (Block-L-Z (c "blok-R-L-Z" id #:coeff 1000))
            (G-X (c "R-G-X" id #:coeff 1000))
            (G-Y (c "R-G-Y" id #:coeff 1000))
            (G-Z (c "R-G-Z" id #:coeff 1000))
            (Block-G-X (c "blok-R-G-X" id))
            (Block-G-Y (c "blok-R-G-Y" id))
            (Block-G-Z (c "blok-R-G-Z" id))

            (i (* (get-num-frequency-bins) (c "Number-bins-x" id)))
            (j (* (get-num-frequency-bins) (c "Number-bins-z" id)))
        )

        (letrec
            (
                (draw-row
                    (lambda (sens-h sens-v count count-line)
                        (push)
;                            (colour (vmul (vector (gl 1 g) (gl count g) (gl count g)) clr-coeff))
                            (colour (vmul (vector (gl 1 g) (min 0.91 (gl count g)) (gl count g)) clr-coeff))
;                            (shinyness (c "shyniness" id))
;                            (specular (vmul (vector (gh2 1 g) (gh2 count g) (gh2 count g)) (c "specular-coeff" id)))
                            (translate (vector (* (* sens-h 1.2) count) 0 0)) ; move a little in x
                            (translate (vector 0 (* (* sens-v 1.2) count-line) 0))
                            
                            (if (<= count 0)
                                (scale (vector 1 1 (+ 1 (* (gl 1 g) (* scale-gh-y-incomplete-coeff 0.1)))))
                                (if (= count 16)
                                    (scale (vector 1 1 (+ 1 (* (gl 15 g) (* scale-gh-y-incomplete-coeff 0.1)))))
                                    (scale (vector 1 1 (+ 1 (* (gl count g) (* scale-gh-y-incomplete-coeff 0.1)))))
                                )
                            )
    
                            (scale (vector (/ scale-x (+ 1 (* (gl count g) scale-x-gh))) (/ scale-z (+ 1 (* (gl count g) scale-z-gh))) 1))
                            (translate (vector (* count (* sens-h (* trans-x-gh (gl (* 16 trans-x-freq) g)))) (* (* count count) (* sens-v (* trans-y-gh (gl (* 16 trans-y-freq) g)))) 0))
                            (scale (vmul (vector 1 1 1) scale-global))
                            (draw-cube)
                        (pop)
                        (if (<= count 0)            ; if the count argument is 0
                            0                        ; return 0 (doesn't matter what we return) & exit
                            (draw-row sens-h sens-v (- count 1) count-line) ; otherwise call render again with count - 1 & exit 
                        )
                    )
                )
                (draw-line
                    (lambda (count-line count-row)
                        (rotate (vector (tempo "mur-L-X" L-X) (tempo "mur-L-Y" L-Y) (tempo "mur-L-Z" L-Z)))
                        (when (positive? Block-L-X)
                            (tempo "mur-L-X" null 0))
                        (when (positive? Block-L-Y)
                            (tempo "mur-L-Y" null 0))
                        (when (positive? Block-L-Z)
                            (tempo "mur-L-Z" null 0))
    
                        (cond
                            ((<= count-line 0)
                                (draw-row -1 0 count-row count-line)
                                (draw-row 1 0 count-row count-line)
                            )
                            (else
                                (draw-row -1 1 count-row count-line)
                                (draw-row 1 1 count-row count-line)
                                (draw-row -1 -1 count-row count-line)
                                (draw-row 1 -1 count-row count-line)
                                (draw-line (- count-line 1) count-row)
                            )
                        )
                    )
                )
            )

            (hint-none)
            (hint-solid)
            (blur (c "blur" id))
;            (opacity  cross)

            (rotate (vector (tempo "mur-G-X" G-X) (tempo "mur-G-Y" G-Y) (tempo "mur-G-Z" G-Z)))
            (when (positive? Block-G-X)
                (tempo "mur-G-X" null 0))
            (when (positive? Block-G-Y)
                (tempo "mur-G-Y" null 0))
            (when (positive? Block-G-Z)
                (tempo "mur-G-Z" null 0))
            (draw-line i j)
        )
    )
    (pop)
)
