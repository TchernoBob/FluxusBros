(define (cross-cube id crosss)

(define (cross n chann crossfader)
    (let ((g (c "gain" id))
        (blur (c "blur" id)))
        (cond ((= 0 (mn chann 11))
                (wire-opacity 0))
            (else
                (wire-opacity 1)
                (line-width (+ 0.1 (* (mn chann 11) 10)))))
        (shinyness (m chann 14))
        (colour (vector (gh2 1 g) (gh2 1 g) (gh2 1 g)))
        (cond ((zero? n) 0)
            (else
                (with-state
                    (opacity (* (opa-cross crosss) (+ (c "opa-a" id) (* (c "opa-b" id) (gh2 9 g)))))
                    (opacity (max2 (+ (c "opa-a" id) (* (c "opa-b" id) (gh2 9 g))) (opa-cross crosss)))
                    (translate (vector (gh2 1 g) 0 0))
;                    (scale (vector (gh2 1 g) (gh2 1 g) (gh2 1 g)))
                    (scale (vector (gh2 1 g) (gh2 1 g) (gh2 9 g)))
                    (colour (vmul (vector (gh2 1 g) 0.05 0) (c "color-r" id)))
                    (scale (vmul (vector 1 1 1) (c "scale-r" id)))
                    (draw-cube)
                    (cross (- n 1) chann crossfader))
                (with-state
                    (opacity (max2 (+ (c "opa-a" id) (* (c "opa-b" id) (gh2 9 g))) (opa-cross crosss)))
                    (translate (vector (* -1 (gh2 1 g)) 0 0))
;                    (scale (vector (gh2 1 g) (gh2 1 g) (gh2 1 g)))
                    (scale (vector (gh2 1 g) (gh2 1 g) (gh2 9 g)))
                    (colour (vmul (vector (gh2 1 g) 0.05 0) (c "color-r" id)))
                    (scale (vmul (vector 1 1 1) (c "scale-r" id)))
                    (draw-cube)
                    (cross (- n 1) chann crossfader))
                (with-state
                    (opacity (max2 (+ (c "opa-a" id) (* (c "opa-b" id) (gh2 6 g))) (opa-cross crosss)))
                    (translate (vector 0 (gh2 3 g) 0))
;                    (scale (vector (gh2 3 g) (gh2 3 g) (gh2 3 g)))
                    (scale (vector (gh2 3 g) (gh2 6 g) (gh2 3 g)))
                    (colour (vmul (vector 0 (gh2 3 g) 0) (c "color-v" id)))
                    (scale (vmul (vector 1 1 1) (c "scale-v" id)))
                    (draw-cube)
                    (cross (- n 1) chann crossfader))
                (with-state
                    (opacity (max2 (+ (c "opa-a" id) (* (c "opa-b" id) (gh2 6 g))) (opa-cross crosss)))
                    (translate (vector 0 (* -1 (gh2 3 g)) 0))
;                   (scale (vector (gh2 6 g) (gh2 6 g) (gh2 6 g)))
                    (scale (vector (gh2 6 g) (gh2 6 g) (gh2 3 g)))
                    (colour (vmul (vector 0 (gh2 3 g) 0) (c "color-v" id)))
                    (scale (vmul (vector 1 1 1) (c "scale-v" id)))
                    (draw-cube)
                    (cross (- n 1) chann crossfader))
                (with-state
                    (opacity (max2 (+ (c "opa-a" id) (* (c "opa-b" id) (gh2 1 g))) (opa-cross crosss)))
                    (translate (vector 0 0 (* 1 (gh2 6 g))))
;                    (scale (vector (gh2 9 g) (gh2 9 g) (gh2 9 g)))
                    (scale (vector (gh2 6 g) (gh2 9 g) (gh2 6 g)))
                    (colour (vmul (vector (gh2 6 g) 0 (gh2 6 g)) (c "color-b" id)))
                    (scale (vmul (vector 1 1 1) (c "scale-b" id)))
                    (draw-cube)
                    (cross (- n 1) chann crossfader))
                (with-state
                    (opacity (max2 (+ (c "opa-a" id) (* (c "opa-b" id) (gh2 1 g))) (opa-cross crosss)))
                    (translate (vector 0 0 (* -1 (gh2 6 g))))
;                   (scale (vector (gh2 6 g) (gh2 6 g) (gh2 6 g)))
                    (scale (vector (gh2 6 g) (gh2 9 g) (gh2 6 g)))
                    (colour (vmul (vector (gh2 6 g) 0 (gh2 6 g)) (c "color-b" id)))
                    (scale (vmul (vector 1 1 1) (c "scale-b" id)))
                    (draw-cube)
                    (cross (- n 1) chann crossfader))
            )
        )
    )
)

(cross 2 0 1)

)

;(define cross-state 0)
;(define cross-stop 0)

#(define (cross-control chann crossfader in)
    (when (not (zero? (pipe-content-length in)))
        (let ((data (read in)))
            (if (equal? "1" data)
                (set! cross-stop 1)
                (set! cross-stop 0)
            )
        )
    )
    (cond ((and (= cross-state 0) (> (m 0 crossfader) 0) (zero? cross-stop))
        (set! cross-state 1)
        (spawn-task (lambda () (cross 2 chann crossfader)) 'cross)))
    (cond ((or (and (= cross-state 1) (= (m 0 crossfader) 0)) (not (zero? cross-stop)))
        (set! cross-state 0)
        (rm-task 'cross)))
)
